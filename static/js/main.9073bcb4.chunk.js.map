{"version":3,"sources":["components/PostsList/PostsList.tsx","components/Loader/Loader.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","api/posts.ts","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["PostsList","posts","postId","setPostId","className","length","map","post","userId","title","id","type","onClick","Loader","BASE_URL","getRequest","endpoint","a","fetch","response","json","console","log","removeRequest","method","postRequest","body","headers","JSON","stringify","getPostComments","removePostComment","commentId","postComment","comment","NewCommentForm","React","memo","fetchComments","useState","newCommentName","setNewCommentName","newCommentEmail","setNewCommentEmail","newCommentBody","setNewCommentBody","isInputFill","setIsInputFill","isLoading","setLoading","removeFillError","updateComments","newComment","onSubmit","event","preventDefault","name","email","value","placeholder","onChange","target","getAllPosts","getUserPosts","getPostDetails","PostDetails","postDetails","setPostDetails","postComments","setpPostComments","setIsLoading","isHidden","setHidden","fetchPostDetails","useEffect","filter","c","getAllUsers","App","users","setUsers","setPosts","selectedUserId","setSelectedUserId","fetchUsers","usersFromServer","fetchPosts","postsFromServer","fetchUserPosts","postsUsersFromServer","htmlFor","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9073bcb4.chunk.js","sourcesContent":["import React from 'react';\n\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  postId: number,\n  setPostId: (id: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  postId,\n  setPostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    {posts.length === 0\n      ? <p>Posts not found</p>\n      : (\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li className=\"PostsList__item\" key={post.id}>\n              <div>\n                <b>{`[User #${post.userId}]: `}</b>\n                {post.title}\n              </div>\n\n              { postId === post.id ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => setPostId(0)}\n                >\n                  Close\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => setPostId(post.id)}\n                >\n                  Open\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      )}\n  </div>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getRequest = async (endpoint: string) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`);\n\n    return await response.json();\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    return console.log(error);\n  }\n};\n\nexport const removeRequest = async (endpoint: string) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`, {\n      method: 'DELETE',\n    });\n\n    return await response.json();\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    return console.log(error);\n  }\n};\n\nexport const postRequest = async (endpoint: string, body: PostComment) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`, {\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      method: 'POST',\n      body: JSON.stringify(body),\n    });\n\n    return await response.json();\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    return console.log(error);\n  }\n};\n","import { removeRequest, getRequest, postRequest } from './api';\n\nexport const getPostComments = async (postId: number): Promise<Comment[]> => (\n  getRequest(`/comments?postId=${postId}`)\n);\n\nexport const removePostComment = async (commentId: number) => (\n  removeRequest(`/comments/${commentId}`)\n);\n\nexport const postComment = async (comment: PostComment) => (\n  postRequest('/comments', comment)\n);\n","import React, { useState } from 'react';\nimport { postComment } from '../../api/comments';\n\nimport './NewCommentForm.scss';\n\nimport { Loader } from '../Loader';\n\ntype Props = {\n  postId: number,\n  fetchComments: () => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({ postId, fetchComments }) => {\n  const [newCommentName, setNewCommentName] = useState('');\n  const [newCommentEmail, setNewCommentEmail] = useState('');\n  const [newCommentBody, setNewCommentBody] = useState('');\n  const [isInputFill, setIsInputFill] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const removeFillError = () => {\n    if (isInputFill) {\n      setIsInputFill(false);\n    }\n  };\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewCommentName(event.target.value);\n    removeFillError();\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewCommentEmail(event.target.value);\n    removeFillError();\n  };\n\n  const handleBodyChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setNewCommentBody(event.target.value);\n    removeFillError();\n  };\n\n  const updateComments = async (newComment: PostComment) => {\n    await postComment(newComment);\n    await fetchComments();\n    setLoading(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!newCommentName || !newCommentEmail || !newCommentBody) {\n      setIsInputFill(true);\n    } else {\n      setLoading(true);\n\n      const newComment = {\n        postId,\n        name: newCommentName,\n        email: newCommentEmail,\n        body: newCommentBody,\n      };\n\n      updateComments(newComment);\n      setNewCommentName('');\n      setNewCommentEmail('');\n      setNewCommentBody('');\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          value={newCommentName}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={handleNameChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={newCommentEmail}\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={handleEmailChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={newCommentBody}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={handleBodyChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n      {isLoading && <Loader />}\n      {isInputFill && <h3>Fill all fields</h3>}\n    </form>\n  );\n});\n","import { getRequest } from './api';\n\nexport const getAllPosts = async (): Promise<Post[]> => getRequest('/posts');\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => (\n  getRequest(`/posts?userId=${userId}`)\n);\n\nexport const getPostDetails = async (postId: number): Promise<Post> => (\n  getRequest(`/posts/${postId}`)\n);\n","import React, { useEffect, useState } from 'react';\nimport './PostDetails.scss';\n\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { removePostComment, getPostComments } from '../../api/comments';\n\ntype Props = {\n  postId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [postDetails, setPostDetails] = useState<Post>();\n  const [postComments, setpPostComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isHidden, setHidden] = useState(true);\n\n  const fetchComments = async () => {\n    setpPostComments(await getPostComments(postId));\n    setIsLoading(false);\n  };\n\n  const fetchPostDetails = async () => {\n    setIsLoading(true);\n    setPostDetails(await getPostDetails(postId));\n    fetchComments();\n  };\n\n  useEffect(() => {\n    if (postId !== 0) {\n      fetchPostDetails();\n    }\n  }, [postId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {isLoading\n        ? <Loader />\n        : (\n          <>\n            <section className=\"PostDetails__post\">\n              <p>{postDetails?.title}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              {postComments.length === 0\n                ? <p>No comments</p>\n                : (\n                  <>\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => setHidden(!isHidden)}\n                    >\n                      {`${isHidden ? 'Hide' : 'Show'} ${postComments.length} comments`}\n                    </button>\n\n                    {isHidden && (\n                      <ul className=\"PostDetails__list\">\n                        {postComments.map(comment => (\n                          <li className=\"PostDetails__list-item\" key={comment.id}>\n                            <button\n                              type=\"button\"\n                              className=\"PostDetails__remove-button button\"\n                              onClick={() => {\n                                removePostComment(comment.id);\n                                setpPostComments(postComments.filter(c => c.id !== comment.id));\n                              }}\n                            >\n                              X\n                            </button>\n                            <p>{comment.body}</p>\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                  </>\n                )}\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  postId={postId}\n                  fetchComments={fetchComments}\n                />\n              </div>\n            </section>\n          </>\n        )}\n    </div>\n  );\n};\n","import { getRequest } from './api';\n\nexport const getAllUsers = async (): Promise<User[]> => getRequest('/users');\n","import React, { useEffect, useState } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllUsers } from './api/users';\nimport { getAllPosts, getUserPosts } from './api/posts';\n\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [postId, setPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const fetchUsers = async () => {\n    setIsLoading(true);\n\n    const usersFromServer = await getAllUsers();\n\n    setUsers(usersFromServer);\n  };\n\n  const fetchPosts = async () => {\n    const postsFromServer = await getAllPosts();\n\n    setPosts(postsFromServer);\n    setIsLoading(false);\n  };\n\n  const fetchUserPosts = async () => {\n    setIsLoading(true);\n    const postsUsersFromServer = await getUserPosts(selectedUserId);\n\n    setPosts(postsUsersFromServer);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  useEffect(() => {\n    if (selectedUserId === 0) {\n      fetchPosts();\n    } else {\n      fetchUserPosts();\n    }\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"user-selector\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            id=\"user-selector\"\n            value={selectedUserId}\n            onChange={(event) => setSelectedUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoading\n            ? <Loader />\n            : (\n              <PostsList\n                posts={posts}\n                postId={postId}\n                setPostId={setPostId}\n              />\n            )}\n        </div>\n\n        <div className=\"App__content\">\n          {postId !== 0\n            && <PostDetails postId={postId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}